// <auto-generated />
using System;
using Filmify.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Filmify.Infrastructure.Migrations
{
    [DbContext(typeof(FilmifyDbContext))]
    [Migration("20250915055957_addCategory")]
    partial class addCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Filmify.Domain.Entities.Box", b =>
                {
                    b.Property<long>("BoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BoxId"));

                    b.Property<string>("BoxName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("BoxId");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RegisteringUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.Film", b =>
                {
                    b.Property<long>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FilmId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovalUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilmTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("JsonLD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("RegisteringUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("FilmId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.FilmBox", b =>
                {
                    b.Property<long>("FilmId")
                        .HasColumnType("bigint");

                    b.Property<long>("BoxId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "BoxId");

                    b.HasIndex("BoxId");

                    b.ToTable("FilmBoxes");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.FilmTag", b =>
                {
                    b.Property<long>("FilmId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.HasKey("FilmId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FilmTags");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TagId"));

                    b.Property<Guid?>("ApprovalUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("RegisteringUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.Film", b =>
                {
                    b.HasOne("Filmify.Domain.Entities.Category", "Category")
                        .WithMany("Films")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Filmify.Domain.ValueObjects.Duration", "Duration", b1 =>
                        {
                            b1.Property<long>("FilmId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Minutes")
                                .HasColumnType("int")
                                .HasColumnName("DurationMinutes");

                            b1.Property<int>("Seconds")
                                .HasColumnType("int")
                                .HasColumnName("DurationSeconds");

                            b1.HasKey("FilmId");

                            b1.ToTable("Films");

                            b1.WithOwner()
                                .HasForeignKey("FilmId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Duration");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.FilmBox", b =>
                {
                    b.HasOne("Filmify.Domain.Entities.Box", "Box")
                        .WithMany("FilmBoxes")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Filmify.Domain.Entities.Film", "Film")
                        .WithMany("FilmBoxes")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.FilmTag", b =>
                {
                    b.HasOne("Filmify.Domain.Entities.Film", "Film")
                        .WithMany("FilmTags")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Filmify.Domain.Entities.Tag", "Tag")
                        .WithMany("FilmTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.Box", b =>
                {
                    b.Navigation("FilmBoxes");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.Category", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.Film", b =>
                {
                    b.Navigation("FilmBoxes");

                    b.Navigation("FilmTags");
                });

            modelBuilder.Entity("Filmify.Domain.Entities.Tag", b =>
                {
                    b.Navigation("FilmTags");
                });
#pragma warning restore 612, 618
        }
    }
}
